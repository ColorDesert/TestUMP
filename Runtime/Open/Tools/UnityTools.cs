using System;using System.Diagnostics.CodeAnalysis;using System.Globalization;using System.Text.RegularExpressions;using Open.Tools.Platform;using Open.Tools.Utils;using UnityEngine;#if UNITY_EDITOR#endifnamespace Open.Tools{    [SuppressMessage("ReSharper", "ConditionIsAlwaysTrueOrFalse")]    public class UnityTools    {        internal static BasePlatform Platform { get; private set; }        private static BasePlatform getPlatform()        {            if (Platform == null)            {#if UNITY_IOS && !UNITY_EDITOR                Platform = new IOSPlatform();#elif UNITY_ANDROID && !UNITY_EDITOR                Platform = new AndroidPlatform();#else                Platform = new DefaultPlatform();#endif            }            return Platform;        }        /// <summary>        /// Show dialog for different platform        /// </summary>        /// <param name="title">The title of the dialog</param>        /// <param name="message">The text of the dialog</param>        public static void ShowDialog(string title, string message)        {            getPlatform().ShowDialog(title, message);        }        /// <summary>        /// Size of free disk, unit: MB        /// </summary>        /// <returns>Size of free disk</returns>        public static long FreeDiskSize()        {            return getPlatform().FreeDiskSize();        }        /// <summary>        /// Memory usage, unit: MB        /// </summary>        /// <returns>Memory usage</returns>        public static long MemoryUsage()        {            return getPlatform().MemoryUsage();        }        /// <summary>        /// Memory available, unit: MB        /// </summary>        /// <returns>Memory available</returns>        public static long MemoryAvailable()        {            return getPlatform().MemoryAvailable();        }        /// <summary>        /// Copy text to pasteboard        /// </summary>        /// <param name="text">The text will copy to clipboard</param>        public static void CopyToClipboard(string text)        {            getPlatform().CopyToClipboard(text);        }        /// <summary>        /// Paste text in pasteboard        /// </summary>        /// <returns>The text in pasteboard will be pasted</returns>        public static string PasteFromClipboard()        {            return getPlatform().PasteFromClipboard();        }        /// <summary>        /// Try hide or show status bar if it has notch screen, then judge whether the device has notch screen        /// </summary>        /// <param name="hidden"></param>        /// <returns>Whether the device has notch screen</returns>        public static bool StatusBarHidden(bool hidden)        {            TryHideStatusBar(hidden);            return IsNotchScreen();        }        /// <summary>        /// Judge whether the device has notch screen        /// </summary>        /// <returns>Whether the device has notch screen</returns>        public static bool IsNotchScreen()        {            return getPlatform().IsNotchScreen();        }        /// <summary>        /// get safe area offset, Returns the inset from the top which avoids the display cutout in pixels.        /// </summary>        /// <returns></returns>        public static int GetOffsetSafeArea()        {            return getPlatform().GetOffsetSafeArea();        }        /// <summary>        /// Try hide or show status bar if it has notch screen        /// </summary>        /// <param name="hidden">Hide or show will be exec</param>        public static void TryHideStatusBar(bool hidden)        {            getPlatform().TryHideStatusBar(hidden);        }        /// <summary>        /// Share with system preset share        /// </summary>        /// <param name="text"></param>        /// <param name="url"></param>        /// <param name="image"></param>        public static void SystemShare(string text, string url, byte[] image)        {            var content = "{\"text\":\"" + text + "\"," + "\"url\":\"" + url + "\"}";            var length = image?.Length ?? 0;            getPlatform().SystemShare(content, image, length);        }        /// <summary>        /// Restart game, only Android will restart, iOS will exit        /// </summary>        public static void Restart()        {            getPlatform().Restart();        }        public static void CopyAssetsFile(string srcFile, string destFile)        {            if (string.IsNullOrEmpty(srcFile) || string.IsNullOrEmpty(destFile))            {                return;            }            getPlatform().CopyAssetsFile(srcFile, destFile);        }        public static int GetNetState()        {            return getPlatform().GetNetState();        }        /// <summary>        /// 获取网络类型        /// </summary>        /// <returns>EPNetWorkType(None：-1，Mobile:1，WiFi：2)</returns>        public static EPNetWorkType GetNetworkState()        {            return getPlatform().GetNetworkState();        }        /// <summary>        ///  添加网络类型变化监听        /// </summary>        /// <param name="callback">网络类型变化回调 EPNetWorkType</param>        public static void AddNetworkListener(Action<EPNetWorkType> callback)        {            getPlatform().AddNetworkListener(callback);        }        /// <summary>        ///  移除网络类型变化监听        /// </summary>        /// <param name="callback">网络类型变化回调 EPNetWorkType</param>        public static void RemoveNetworkListener(Action<EPNetWorkType> callback)        {            getPlatform().RemoveNetworkListener(callback);        }        public static float GetBatteryLevel()        {            return getPlatform().GetBatteryLevel();        }        public static string GetPhoneIdentifier(bool readImei = false)        {            return SystemInfo.deviceUniqueIdentifier;        }        public static string GetCPUInfo()        {            return getPlatform().GetCPUInfo();        }        public static long GetElapsedRealtime()        {            return getPlatform().GetElapsedRealtime();        }                /// <summary>        /// 根据本地语言格式化货币价格        /// </summary>        /// <param name="money">价格</param>        /// <param name="decimalBit">保留几位小数</param>        /// <param name="currencySymbol">货币符号</param>        /// <returns>货币价格(例如：HK$12.09)</returns>        public static string FormatMoney(decimal money, int decimalBit, string currencySymbol)        {           return CurrencyUtils.FormatMoney(money, decimalBit, currencySymbol);        }        /// <summary>        /// 根据格式化的价格截取货币符号        /// 思路：去掉字符串里面的数字、小数点（.）、逗号（,）空格        /// </summary>        /// <param name="formatPrice"></param>        /// <returns>货币符号</returns>        public static string GetCurrencySymbolForFormatPrice(string formatPrice)        {            return CurrencyUtils.GetCurrencySymbolForFormatPrice(formatPrice);        }        /*********************************Android**********************************/        public static bool AssetFileExist(string srcPath)        {            var exist = false;#if UNITY_ANDROID && !UNITY_EDITOR            exist = ((AndroidPlatform)getPlatform()).AssetFileExist(srcPath);#endif            return exist;        }        public static bool CheckAndroidAppExist(string packageName)        {            var exist = false;#if UNITY_ANDROID && !UNITY_EDITOR            exist = ((AndroidPlatform)getPlatform()).CheckAppExist(packageName);#endif            return exist;        }        /// <summary>        /// 获取android 包签名文件相应的值        /// </summary>        /// <param name="type">算法类型，取值 “MD5”、"SHA1"、"SHA256"</param>        /// <returns></returns>        public static string GetAndroidAppSignValue(string type)        {            var result = string.Empty;#if UNITY_ANDROID && !UNITY_EDITOR            result = ((AndroidPlatform)getPlatform()).GetAppSignValue(type);#endif            return result;        }        /*********************************iOS**********************************/        public static int GetIOSDeviceGeneration()        {            var gen = 0;#if UNITY_IOS            gen = ((IOSPlatform)getPlatform()).GetIOSDeviceGeneration();#endif            return gen;        }    }}